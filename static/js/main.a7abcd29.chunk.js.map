{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","person","className","src","avatar","alt","name","email","CardList","people","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","onSearchChange","e","setState","searchField","target","value","state","fetch","then","response","json","data","dataWithImg","element","catch","err","console","error","this","filteredPeople","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAaeA,G,MAVF,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACZ,yBAAKC,UAAU,kBACd,6BACC,yBAAKC,IAAKF,EAAOG,OAAQC,IAAI,YAE9B,4BAAKJ,EAAOK,MACZ,2BAAIL,EAAOM,UCGEC,G,MARE,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAChB,yBAAKP,UAAU,aACbO,EAAOC,KAAI,SAACT,GAAD,OACX,kBAAC,EAAD,CAAMU,IAAKV,EAAOW,GAAIX,OAAQA,UCAlBY,G,MAJG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACjC,OAAO,2BAAOb,UAAU,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCkDrEG,G,kBA/Cd,aAAe,IAAD,8BACb,+CAwBDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CACbC,YAAaF,EAAEG,OAAOC,SAxBvB,EAAKC,MAAQ,CACZhB,OAAQ,GACRa,YAAa,IALD,E,iFASO,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACN,IAAMC,EAAcD,EAAKpB,KAAI,SAACsB,GAC7B,OAAO,eAAKA,EAAZ,CAAqB5B,OAAO,wBAAD,OAA0B4B,EAAQpB,GAAlC,+BAE5B,EAAKS,SAAS,CACbZ,OAAQsB,OAGTE,OAAM,SAACC,GACPC,QAAQC,MAAMF,Q,+BAUP,IAAD,EACwBG,KAAKZ,MAA7BhB,EADA,EACAA,OAAQa,EADR,EACQA,YACVgB,EAAiB7B,EAAO8B,QAAO,SAACtC,GACrC,OAAOA,EAAOK,KAAKkC,cAAcC,SAASnB,EAAYkB,kBAGvD,OACC,yBAAKtC,UAAU,OACd,2CACA,kBAAC,EAAD,CAAWY,YAAY,gBAAgBC,aAAcsB,KAAKlB,iBAC1D,kBAAC,EAAD,CAAUV,OAAQ6B,S,GA1CJI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.a7abcd29.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nconst Card = ({ person }) => (\r\n\t<div className='card-container'>\r\n\t\t<div>\r\n\t\t\t<img src={person.avatar} alt='person' />\r\n\t\t</div>\r\n\t\t<h2>{person.name}</h2>\r\n\t\t<p>{person.email}</p>\r\n\t</div>\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../card/card';\r\nimport './card-list.styles.css';\r\n\r\nconst CardList = ({ people }) => (\r\n\t<div className='card-list'>\r\n\t\t{people.map((person) => (\r\n\t\t\t<Card key={person.id} person={person} />\r\n\t\t))}\r\n\t</div>\r\n);\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n\treturn <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />;\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\nimport CardList from './components/card-list/card-list';\nimport SearchBox from './components/search-box/search-box';\n\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tpeople: [],\n\t\t\tsearchField: ''\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tconst dataWithImg = data.map((element) => {\n\t\t\t\t\treturn { ...element, avatar: `https://robohash.org/${element.id}?set=set5&size=180x180` };\n\t\t\t\t});\n\t\t\t\tthis.setState({\n\t\t\t\t\tpeople: dataWithImg\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\t}\n\n\tonSearchChange = (e) => {\n\t\tthis.setState({\n\t\t\tsearchField: e.target.value\n\t\t});\n\t};\n\n\trender() {\n\t\tconst { people, searchField } = this.state;\n\t\tconst filteredPeople = people.filter((person) => {\n\t\t\treturn person.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>People List</h1>\n\t\t\t\t<SearchBox placeholder='search people' handleChange={this.onSearchChange} />\n\t\t\t\t<CardList people={filteredPeople} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}